# [include]
# Inclusion of user/system specific files at the bottom

[core]
  attributesfile = ~/.gitattributes-global
  excludesfile = ~/.gitignore-global

  editor = nvim

  # See https://github.com/so-fancy/diff-so-fancy
  # - NOT patch compatible output
  # - no +/- beginning of line
  # 0 word difference
  pager = diff-so-fancy | less --tabs=4 -RFX

[pull]
  # Since 2.0
  # Corresponds to:
  #   git fetch
  #   git merge --ff-only <branch>
  # It will fail, if there is a commit that can't be fast forwarded
  # Normally you want to run `pull --rebase` as a response
	ff = only

[push]
  # nothing:  do not push anything.

  # default in 1.x
  # this makes clients before 2.x, using --force really dangerous
  # matching: push all matching branches. All branches having the same
  #           name in both ends are considered to be matching.
  # upstream: push the current branch to its upstream branch.
  # tracking: deprecated synonym for upstream.
  # current:  push the current branch to a branch of the same name.

  # default since 2.0, new  since 1.7.11
  # simple:   like upstream, but refuses to push if upstream branch’s name
  #           is different from the local one
  default = current

  # since 2.4.1
  # pushes relevant (only referenced by pushed commits) tags by default
  # This does
  #   git push --follow-tags, which is available since 1.8.3
  followTags = true

[rerere]
  # reuse recorded resolution
  # tells git to remember how you resolved hunk conflicts, so that next time
  # the same conflict arises it is resolved automatically
  enabled = true

[alias]
  a = add

  # `add --all :/` add from root dir, superfluous since 2.0
  # equivalent to `add .` since 2.0
  # before it ignored deleted files
  aa = add --all

  # Interactive mode to stage files
  ai = add -i

  # Interactive mode to stage hunks
	ap = add -p
	au = add -u

  # -v/--verbose
  #   When in list mode, show sha1 and commit subject line for each head,
  #   along with relationship to upstream branch
  b = branch --verbose

  # -a/--all
  #   List both remote-tracking branches and local branches.
  branches = branch --all

  c = commit

  # --amend
  #   Replace the tip of the current branch by creating a new commit.
  #   Can thus be used to fix up the last commianging commit message
  #   and/or adding more hunk
  cam = commit --amend

  co = checkout

  # --name-only
  #   Show only names of changed files.
  # --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]
  #   Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R),
  #   have their type (i.e. regular file, symlink, submodule, ...) changed (T),
  #   are Unmerged (U), are Unknown (X), or have had their pairing Broken (B)
  conflicts = diff --name-only --diff-filter=U

  # -b <new_branch>
  # Create a new branch named <new_branch>
  cob = checkout -b

  # discard indidual hunks
  cop = checkout --patch

  # Credit an author on the latest commit
  # Usage: git credit "John Doe" jdoe@domain.tld
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # run ctags on the project
  ctags = !.git/hooks/ctags

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # Run `git serve`, get your ip and tell your buddy to:
  # - `git fetch git://192.168.1.123/`
  # - `git clone git://192.168.1.123/ local-repo-name`
  # - `git pull git://192.168.1.123/ branchname`
  serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/

  d = diff
  dc = diff --cached
  dt = difftool
  dtc = difftool --cached

  # Find a file path in codebase:
  find = "!git ls-files | grep -i"
  f = !git find

  # simple log
  l = log  --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

  # --force-with-lease
  #   makes sure that nobody else pushed something on top of my old
  #   workon remote, --force alone would ust overwrite
  obi = push --force-with-lease
  please = push --force-with-lease


  pop = stash pop

  # -v/--verbose
  #   show remote url after name
  remotes = remote -v

  # -s/--short
  #   Give the output in the short-format.
  s = status --short
  ss = status

  # initialize repoisotry with empty commit for easier rebasing
  # later on
  start = !git init && git commit --allow-empty -m \"Initial commit\"

  # stash only unstaged changes to tracked files
  stsh  = stash --keep-index
  # stash any changes to tracked files
  # stash = stash
  # stash untracked and tracked files
  staash = stash --include-untracked
  # stash ignored, untracked, and tracked files
  staaash = stash --all

  # -l/--list <pattern>
  #   List tags with names that match the given pattern (or all if no pattern is given)
  tags = tag -l
  up = pull --rebase

  # unstage is the opposite of git add. It removes items from the staging area.
  unstage = reset HEAD
  un = reset HEAD
	slog = log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --no-merges --invert-grep --grep 'Bumps version'

[commit]
  # since git 2.9 as option
  # Show unified diff between the HEAD commit and what would be
  # committed at the bottom of the commit message template.
  verbose = true

[diff]
  # since git 2.11 as option
  # try to create more aesthetically pleasing diffs
  indentHeuristic = true

  # Use better, descriptive initials (c, i, w) instead of a/b.
  # git diff                  compares the (i)ndex and the (w)ork tree;
  # git diff HEAD             compares a (c)ommit and the (w)ork tree;
  # git diff --cached         compares a (c)ommit and the (i)ndex;
  # git diff HEAD:file1 file2 compares an (o)bject and a (w)ork tree entity;
  # git diff --no-index a b   compares two non-git things (1) and (2).
  mnemonicPrefix = true

[merge]
  # By default, when you merge a branch in git, you get a fairly meaningless
  # message like merge #branch 'master' of git@github.com:name/project.
  # To get a summary of the changes you're merging, turn this option on:
  summary=true

  # Set default conflictstyle to diff3.
  # In addition to the <<<<<<<, =======, and >>>>>>> markers,
  # it uses another ||||||| marker that is followed by the original text.
  # default is `merge`
  conflictstyle = diff3

[rebase]
  # since 2.7
  # This allows you to rebase on a dirty worktree. It automatically creates
  # a temporary stash before the operation begins and applies it after the
  # operation ends. Use with care: final stash application after a successful
  # rebase might result in non-trivial conflicts.
  autoStash = true

[color]
  ui = true

[color "diff"]
  meta = 227
  commit = 227 bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[include]
  path = ~/.gitconfig_user
  path = ~/.gitconfig_system

[init]
  templatedir = ~/.git_template
