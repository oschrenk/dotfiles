[user]
	name = Oliver Schrenk
	email = oliver.schrenk@gmail.com

[core]
	attributesfile = ~/.gitattributes-global
	excludesfile = ~/.gitignore-global

	editor = vim

[push]
	# nothing: do not push anything.
	# matching: push all matching branches. All branches having the same
	#   name in both ends are considered to be matching. This is default.
	# upstream: push the current branch to its upstream branch.
	# tracking: deprecated synonym for upstream.
	# current: push the current branch to a branch of the same name.

	default = current

[rerere]
	enabled = true

[alias]
	a = add
	aa = add --all :/
	ai = add -i
	ap = add -p
	au = add -u

	b = branch -v
	branches = branch -a

	c = commit -v
	cam = commit --amend

	co = checkout
	cob = checkout -b

	# Credit an author on the latest commit
	## Usage: git credit "John Doe" jdoe@domain.tld
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Run `git serve`, get your ip and tell your buffy to:
	# - `git fetch git://192.168.1.123/`
	# - `git clone git://192.168.1.123/ local-repo-name`
	# - `git pull git://192.168.1.123/ branchname`
	serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/

	d = diff
	dc = diff --cached
	dt = difftool
	dtc = difftool --cached

	# Find a file path in codebase:
	f = "!git ls-files | grep -i"

	fi = flow init
	fid = flow init -d
	fff = flow feature finish
	ffs = flow feature start
	fhf = flow hotfix finish
	fhs = flow hotfix start
	frf = flow release finish
	frs = flow release start

	lls = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%cr)%C(reset) %C(white)%s%C(reset) %C(bold white)— %cn%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
    lll = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%cD%C(reset) %C(bold green)(%cr)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %cn%C(reset)' --abbrev-commit

    standup = !clear && git log --since '1 day ago' --no-merges --pretty=format':%C(yellow)%h %aN%n %B%n' --author $(git config --global --get user.email)

	pod = push origin develop
	pog = push origin gh-pages
	pom = push origin master
	pov = push origin vendor
	pomd = !git pom && git pod
	pomdt = !git pom && git pod && git put

	pud = pull origin develop
	pum = pull origin master

	put = push --tags

	pop = stash pop

	remotes = remote -v

	s = status -s
	ss = status

	sd = svn dcommit
	sr = svn rebase

	tags = tag -l
	up = pull --rebase

	# unstage is the opposite of git add. It removes items from the staging area.
	unstage = reset HEAD
	un = reset HEAD

	# Use Kaleidoscope as a tool for feature branch review
	# Taken from https://github.com/rustle/KaleidoscopeVCSTidbits
	#
	# To review HEAD with master as your mainline branch
	# 	git review
	#
	# To review a branch or sha when master is your mainline branch
	#	git review some-feature-branch-or-sha
	#
	# To review a branch (or sha) by name with a custom mainline branch
	#	git review some-feature-branch-or-sha mainline-branch

	review = "!sh -c 'SHA=${1:-HEAD}; BRANCH=${2:-develop}; if [ $SHA == $BRANCH ] ; then SHA=HEAD; fi; git diff $BRANCH...$SHA;' -"
	reviewtool = "!sh -c 'SHA=${1:-HEAD}; BRANCH=${2:-develop}; if [ $SHA == $BRANCH ] ; then SHA=HEAD; fi; git difftool -y -t Kaleidoscope $BRANCH...$SHA;' -"
	rt = reviewtool

[diff]
	tool = Kaleidoscope

[difftool]
	prompt = false

[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"



[merge]
	# By default, when you merge a branch in git, you get a fairly meaningless
	# message like merge #branch 'master' of git@github.com:name/project.
	# To get a summary of the changes you're merging, turn this option on:
	summary=true

	tool = Kaleidoscope

[mergetool]
	prompt = false

[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true



[color]
    branch = auto
    diff = auto
    status = auto
    interactive = auto
	sh = auto

[color "branch"]
    current = red
    local = green
    remote = yellow

[color "sh"]
	branch = yellow
	workdir = white
	dirty = red

[credential]
	helper = osxkeychain

