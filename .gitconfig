# [include]
# Inclusion of user/system specific files at the bottom

[core]
	attributesfile = ~/.gitattributes-global
	excludesfile = ~/.gitignore-global

	editor = nvim
	pager = diff-so-fancy | less --tabs=4 -RFX

[push]
	# nothing:  do not push anything.
	# matching: push all matching branches. All branches having the same
	#           name in both ends are considered to be matching.
	# upstream: push the current branch to its upstream branch.
	# tracking: deprecated synonym for upstream.
	# current:  push the current branch to a branch of the same name.
	# simple:   like upstream, but refuses to push if upstream branch’s name
	#           is different from the local one
	default = current

[rerere]
  # reuse recorded resolution
  # tells git to remember how you resolved hunk conflicts, so that next time
  # the same conflict arises it is resolved automatically
	enabled = true

[alias]
	a = add
	aa = add --all :/
	ai = add -i
	ap = add -p
	au = add -u

	# -v/--verbose
	#   When in list mode, show sha1 and commit subject line for each head,
	#   along with relationship to upstream branch
	b = branch --verbose

	# -a/--all
	#   List both remote-tracking branches and local branches.
	branches = branch --all

	c = commit

  # --amend
  #   Replace the tip of the current branch by creating a new commit.
  #   Can thus be used to fix up the last commianging commit message
  #   and/or adding more hunk
	cam = commit --amend

	co = checkout

  # --name-only
  #   Show only names of changed files.
  # --diff-filter=[(A|C|D|M|R|T|U|X|B)...[*]]
  #   Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R),
  #   have their type (i.e. regular file, symlink, submodule, ...) changed (T),
  #   are Unmerged (U), are Unknown (X), or have had their pairing Broken (B)
  conflicts = diff --name-only --diff-filter=U

	# -b <new_branch>
	# Create a new branch named <new_branch>
	cob = checkout -b

  # discard indidual hunks
  cop = checkout --patch

	# Credit an author on the latest commit
	# Usage: git credit "John Doe" jdoe@domain.tld
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # run ctags on the project
	ctags = !.git/hooks/ctags

	# Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Run `git serve`, get your ip and tell your buddy to:
	# - `git fetch git://192.168.1.123/`
	# - `git clone git://192.168.1.123/ local-repo-name`
	# - `git pull git://192.168.1.123/ branchname`
	serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/

	d = diff
	dc = diff --cached
	dt = difftool
	dtc = difftool --cached

	# Find a file path in codebase:
  find = "!git ls-files | grep -i"
	f = !git find

  # simple log
  l = log  --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

	pop = stash pop

  # -v/--verbose
  #   show remote url after name
	remotes = remote -v

	# -s/--short
	#   Give the output in the short-format.
	s = status --short
	ss = status

	# -l/--list <pattern>
	#   List tags with names that match the given pattern (or all if no pattern is given)
	tags = tag -l
	up = pull --rebase

	# unstage is the opposite of git add. It removes items from the staging area.
  unstage = reset HEAD
  un = reset HEAD

[commit]
	# since git 2.9 as option
	# Show unified diff between the HEAD commit and what would be
	# committed at the bottom of the commit message template.
	verbose = true

[diff]
  # since git 2.11 as option
  # try to create more aesthetically pleasing diffs
	indentHeuristic = true

[merge]
	# By default, when you merge a branch in git, you get a fairly meaningless
	# message like merge #branch 'master' of git@github.com:name/project.
	# To get a summary of the changes you're merging, turn this option on:
	summary=true

[rebase]
  # since 2.7
  # This allows you to rebase on a dirty worktree. It automatically creates
  # a temporary stash before the operation begins and applies it after the
  # operation ends. Use with care: final stash application after a successful
  # rebase might result in non-trivial conflicts.
	autoStash = true

[color]
  ui = auto
	sh = auto

[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

[include]
	path = ~/.gitconfig_user
	path = ~/.gitconfig_system

[init]
	templatedir = ~/.git_template
