# Setup SSH-agent found at http://www.cygwin.com/ml/cygwin/2001-06/msg00537.html
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
     echo "Initialising new SSH agent..."
     /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
     echo succeeded
     chmod 600 "${SSH_ENV}"
     . "${SSH_ENV}" > /dev/null
     /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
     . "${SSH_ENV}" > /dev/null
     #ps ${SSH_AGENT_PID} doesn't work under cywgin
     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
         start_agent;
     }
else
     start_agent;
fi

#echo and run
function ear() {
    echo "$@" ; "$@" ;
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# cdf: cd's to frontmost window of Finder
# source: http://asktherelic.com/2009/01/31/osx-terminal-and-finder-integration/
cdf ()
{
    currFolderPath=$( /usr/bin/osascript <<"    EOT"
        tell application "Finder"
            try
                set currFolder to (folder of the front window as alias)
            on error
                set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
    EOT
    )
    echo "cd to "$currFolderPath""
    cd "$currFolderPath"
}

# Simple Calculator
? () {

    local result=""

    result="$( printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n' )"
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//'   # remove tailing zeros
    else
        printf "$result"
    fi

    printf "\n"

}

# Sort the "du" output and use human-readable units.
function duh {
    du -sk "$@" | sort -n | while read size fname; do
        for unit in KiB MiB GiB TiB PiB EiB ZiB YiB; do
            if [ "$size" -lt 1024 ]; then
                echo -e "${size} ${unit}\t${fname}";
                break;
            fi;
            size=$((size/1024));
        done;
    done;
}

# Extract most know archives with one command
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# `sl` with no arguments opens the current directory in Sublime, otherwise opens
# the given location
function sl() {
  if [ $# -eq 0 ]; then
    subl .
  else
    subl "$@"
  fi
}

# find and list processes matching a case-insensitive partial-match string
fp () {
  if [ -z "$1" ] ; then
    echo "Usage: fp [partial name]"
    return 1
  fi
  ps Ao pid,comm | awk '{match($0,/[^\/]+$/); print substr($0,RSTART,RLENGTH)": "$1}' | grep -i $1 | grep -v grep
}

# build menu to kill process
fk () {
  if [ -z "$1" ] ; then
    echo "usage: fk [partial name]"
    return 1
  fi

  IFS=$'\n'
  PS3='Kill which process? '
  RESULTS=$(fp $1)
  if [ -z "$RESULTS" ] ; then
    echo "No processes found"
    return 1
  fi
  select OPT in "Cancel" $RESULTS ; do
    if [ $OPT != "Cancel" ]; then
      kill $(echo $OPT | awk '{print $NF}')
    fi
    break
  done
  unset IFS
}

# open dash
function dash() {
  if [ -z "$1" ] ; then
    echo "Usage: dash [query]"
    return 1
  fi
  QUERY="$@"
  open "dash://$QUERY"
}
