# vim:fileencoding=utf-8:ft=conf:foldmethod=marker
# https://sw.kovidgoyal.net/kitty/conf.html

# You can include secondary config files via the "include" directive.
# If you use a relative path for include, it is resolved with respect to the
# location of the current config file. For example:
# include other.conf

# You can get a list of full family names available on your computer by running
# kitty list-fonts
# The default values shown below rely on your OS to choose an appropriate monospace font family.

font_family       M+ 1mn light for Powerline
italic_font       M+ 1mn light for Powerline
bold_font         M+ 1mn light for Powerline
bold_italic_font  M+ 1mn light for Powerline
font_size         18.0

cursor                      #20bbfc
cursor_stop_blinking_after  0
scrollback_lines            10000
copy_on_select              no
rectangle_select_modifiers  kitty_mod+alt
select_by_word_characters   :@-./_~?&=%+#
mouse_hide_wait             0
window_alert_on_bell        no
enable_audio_bell           no
remember_window_size        yes
window_margin_width         10
window_padding_width        10
tab_bar_edge                top
shell                       /usr/local/bin/fish
close_on_child_death        no
allow_remote_control        no
macos_titlebar_color        system
macos_hide_titlebar         yes
macos_option_as_alt         yes
macos_hide_from_tasks       no
macos_thicken_font          0.5
macos_traditional_fullscreen  yes
macos_custom_beam_cursor yes
term xterm-kitty

# Color scheme {{{
foreground            #c5c8c6
background            #1d1f21
background_opacity    1.0
selection_foreground  #000000
selection_background  #FFFACD

# The 16 terminal colors. There are 8 basic colors, each color has a dull and
# bright version. You can also set the remaining colors from the 256 color table
# as color16 to color256.

# black
color0   #1d1f21
color8   #333333

# red
color1   #cc6666
color9   #f2777a

# green
color2   #b5bd68
color10  #99cc99

# yellow
color3   #f0c674
color11  #ffcc66

# blue
color4  #81a2be
color12 #6699cc

# magenta
color5   #b294bb
color13  #cc99cc

# cyan
color6   #8abeb7
color14  #66cccc

# white
color7   #c5c8c6
color15  #dddddd
# }}}


# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
kitty_mod cmd

# You can have kitty remove all shortcut definition seen upto this point. Useful for
# instance, to remove the default shortcuts.
clear_all_shortcuts no

# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map kitty_mod+c        copy_to_clipboard
map shift+insert       paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox
map kitty_mod+o        pass_selection_to_program
# }}}

# Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+shift+h   show_scrollback
# }}}

# Window management {{{
map kitty_mod+n         new_window
# map kitty_mod+n        new_os_window
map kitty_mod+w         close_window
map kitty_mod+]         next_window
map kitty_mod+[         previous_window
map kitty_mod+`         move_window_to_top
# map kitty_mod+ctrl+left          neighboring_window left
# map kitty_mod+shift+left         move_window right
# map kitty_mod+ctrl+down          neighboring_window down
# map kitty_mod+shift+down         move_window up
# You can open a new window running an arbitrary program, for example:
# map kitty_mod+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map kitty_mod+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map kitty_mod+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout
map kitty_mod+.        move_tab_forward
map kitty_mod+,        move_tab_backward
map kitty_mod+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
map kitty_mod+equal    increase_font_size
map kitty_mod+minus    decrease_font_size
map kitty_mod+0 restore_font_size
# To setup shortcuts for specific font sizes, follow the example below:
# map kitty_mod+f6     set_font_size 10.0
# map kitty_mod+f7     set_font_size 20.5
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         run_kitten text hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
map kitty_mod+p>f       run_kitten text hints --type path --program -

# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f run_kitten text hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
map kitty_mod+p>l       run_kitten text hints --type line --program -

# Select words and insert into terminal.
map kitty_mod+p>w       run_kitten text hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
map kitty_mod+enter      toggle_fullscreen
map kitty_mod+u        input_unicode_character
map kitty_mod+f2       edit_config_file
# You can customize how the URLs are
# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+escape   kitty_shell window

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}
