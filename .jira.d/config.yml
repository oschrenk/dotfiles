#!/bin/sh

########################
# Configuration
########################
# This relies on password being stored in your keychain
# security add-generic-password -a ${USER} -s jira-default-endpoint -w "https://jira.acme.com"
# security add-generic-password -a ${USER} -s jira-default-user -w "john.doe@acme.com"
# security add-generic-password -a ${USER} -s jira-default-project -w "ABC"
DEFAULT_ENDPOINT=$(security find-generic-password -a ${USER} -s jira-default-endpoint -w)
DEFAULT_USER=$(security find-generic-password -a ${USER} -s jira-default-user -w)
DEFAULT_PROJECT=$(security find-generic-password -a ${USER} -s jira-default-project -w)

# current issue
touch ${HOME}/.jira.d/.jira.issue
issueFile="${HOME}/.jira.d/.jira.issue"
echo "ISSUE_FILE: ${issueFile}"
issue=$(head -n +1 $issueFile 2>/dev/null)
echo "issue: ${issue}"

# Defaults
echo "endpoint: $DEFAULT_ENDPOINT"
echo "user: $DEFAULT_USER"
echo "project: $DEFAULT_PROJECT"
echo "password-source: keyring"

########################
# Commmands
########################

# Reminder:
# env variables need to be escaped eg. `\${JIRA_PROJECT}`

cat<<END
custom-commands:
  ########################
  # Find work
  ########################
  - name: mine
    help: Display issues assigned to me
    aliases: ['m']
    script: |-
      if [ -n "\${JIRA_PROJECT}" ]; then
        # if `project: ...` configured just list the issues for current project
        {{jira}} list --query "resolution = unresolved and assignee=currentuser() and project = \${JIRA_PROJECT} ORDER BY priority asc, created"
      else
        # otherwise list issues for all project
        {{jira}} list --query "resolution = unresolved and assignee=currentuser() ORDER BY priority asc, created"
      fi

  - name: sprint
    help: Shows stories in curent sprint
    script: |-
      if [ -n "\${JIRA_PROJECT}" ]; then
        # if `project: ...` configured just list the issues for current project
        {{jira}} list --query "sprint in openSprints() and type != epic and resolution = unresolved and project=\${JIRA_PROJECT} ORDER BY rank asc, created"
      else
        # otherwise list issues for all project
        {{jira}} list --query "sprint in openSprints() and type != epic and resolution = unresolved ORDER BY rank asc, created"
      fi

  ########################
  # Do work
  ########################
  - name: on
    help: Sets global "working on" issue.
    args:
      - name: ISSUE
        required: true
    script: |-
      echo "{{args.ISSUE}}" | cat - "\${JIRA_ISSUE_FILE}" > /tmp/jiratemp && mv /tmp/jiratemp "\${JIRA_ISSUE_FILE}"

  - name: off
    help: Removes global "working on" issue.
    script: |-
      rm "\${JIRA_ISSUE_FILE}"

  - name: grab
    help: Grab a story and work on it
    aliases: ['g']
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} on {{args.ISSUE}}
      {{jira}} assign {{args.ISSUE}} \$JIRA_USER
      {{jira}} trans --noedit "In Progress" {{args.ISSUE}}

  - name: abandon
    help: Marks story as unassigned and put it back into ToDo
    aliases: ['a']
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} off {{args.ISSUE}}
      {{jira}} unassign {{args.ISSUE}}
      {{jira}} trans --noedit "To Do" {{args.ISSUE}}

  - name: review
    help: Marks story as unassigned and move it to "In Review"
    aliases: ['r']
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
    script: |
      {{jira}} off {{args.ISSUE}}
      {{jira}} unassign {{args.ISSUE}}
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} --noedit "Code review" {{args.ISSUE}}

  - name: finish
    help: Marks story as done
    aliases: ['f']
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
    script: |
      {{jira}} off {{args.ISSUE}}
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} "Done" {{args.ISSUE}}

  ########################
  # Log work
  ########################
  - name: worked
    help: Log amount of work
    args:
      - name: TIME
        help: time worked on issue eg 1h20m or "1h 15m"
        required: true
      - name: ISSUE
        help: issue to log work on
        default: \$JIRA_ISSUE
    script: |-
      # deal with e
      issue=""
      {{if args.ISSUE}}
        issue={{args.ISSUE}}
      {{end}}
      if [ -n "\$JIRA_ISSUE" ]; then
        issue="\$JIRA_ISSUE"
      fi

      if [ -n "\$issue" ]; then
        now=\$(date +%s)
        # relies on GNU date (brew install coreutils)
        period=\$(echo "{{args.TIME}}" | sed 's/h/hours/g' | sed 's/m/minutes/g' | xargs -I _ gdate -d"1970-01-01 00:00:00 UTC _" "+%s")
        before=\$((\$now-\$period))
        startdate=\$(date -r \$before +"%Y-%m-%dT%H:%M:%S.000%z")
        {{jira}} worklog add --started "\$startdate" --time-spent="{{args.TIME}}" \$issue
      else
        echo "Issue required."
      fi

  - name: startwork
    help: Mark the start of work on an issue
    aliases: ['s']
    args:
      - name: ISSUE
        help: issue to mark work being started on
        default: \$JIRA_ISSUE
    script: |-
      {{jira}} on {{args.ISSUE}}
      mkdir -p $HOME/.jira.d/work
      touch $HOME/.jira.d/work/{{args.ISSUE}}

  - name: endwork
    help: submit worklog for issue
    args:
      - name: ISSUE
        help: issue to mark work being finished
        default: \$JIRA_ISSUE
    script: |-
      if [ ! -f "$HOME/.jira.d/work/{{args.ISSUE}}" ]; then
        echo "You must execute jira startwork ISSUE first"
        exit 1
      fi
      startdate=\$(stat -f "%Sm" -t "%Y-%m-%dT%H:%M:%S.000%z" \$HOME/.jira.d/work/{{args.ISSUE}})
      starttime=\$(stat -f "%Sm" -t "%s" \$HOME/.jira.d/work/{{args.ISSUE}})
      endtime=\$(date +%s)
      diff=\$(((\$endtime-\$starttime)/60))
      if (( \$diff > 0 )); then
        {{jira}} worklog add -S "\$startdate" --time-spent="\$diff"m {{args.ISSUE}}
        rm $HOME/.jira.d/work/{{args.ISSUE}}
      fi
END
